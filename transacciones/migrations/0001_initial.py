# Generated by Django 5.2.1 on 2025-09-18 02:44

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('clientes', '0001_initial'),
        ('comercio', '0001_initial'),
        ('usuarios', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Caja',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero_caja', models.CharField(help_text="Identificador único o número de la caja (ej: 'CAJ001')", max_length=60, verbose_name='Número de caja')),
                ('nombre_caja', models.CharField(help_text="Nombre descriptivo de la caja (ej: 'Caja Principal')", max_length=80, verbose_name='Nombre de la caja')),
                ('estado', models.BooleanField(default=True, help_text='Indica si la caja está operativa', verbose_name='Activa')),
                ('esta_asignada', models.BooleanField(default=False, help_text='Indica si la caja tiene un usuario asignado actualmente', verbose_name='Asignada')),
                ('sucursal_id', models.ForeignKey(help_text='Sucursal a la que pertenece esta caja', on_delete=django.db.models.deletion.PROTECT, to='comercio.sucursal', verbose_name='Sucursal')),
                ('usuario_id', models.ForeignKey(blank=True, help_text='Usuario actualmente asignado a esta caja', null=True, on_delete=django.db.models.deletion.SET_NULL, to='usuarios.usuario', verbose_name='Usuario asignado')),
            ],
            options={
                'verbose_name': 'Caja registradora',
                'verbose_name_plural': 'Cajas registradoras',
                'ordering': ['sucursal_id__nombre_sucursal', 'numero_caja'],
            },
        ),
        migrations.CreateModel(
            name='DocumentoTributarioElectronico',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('folio', models.IntegerField(help_text='Número de folio del documento', verbose_name='Folio')),
                ('fecha_emision', models.DateTimeField(auto_now_add=True, help_text='Fecha y hora en que se emitió el documento', verbose_name='Fecha de emisión')),
                ('tipo_documento', models.CharField(choices=[('Factura', 'Factura'), ('Boleta', 'Boleta'), ('Nota de Crédito', 'Nota de Crédito'), ('Nota de Débito', 'Nota de Débito')], help_text='Tipo de documento tributario', max_length=80, verbose_name='Tipo de documento')),
                ('total_neto', models.DecimalField(decimal_places=2, help_text='Monto neto del documento', max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Total neto')),
                ('total_iva', models.DecimalField(decimal_places=2, help_text='Monto total de IVA', max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Total IVA')),
                ('total_documento', models.DecimalField(decimal_places=2, help_text='Monto total del documento', max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Total documento')),
                ('medio_pago', models.CharField(help_text='Medio de pago que se emplea para cancelar el documento', max_length=250, verbose_name='Medio de pago')),
                ('estado', models.BooleanField(default=True, help_text='True=Documento emitido, False=Documento anulado', verbose_name='Estado')),
                ('motivo_anulacion', models.CharField(blank=True, help_text='Motivo de la anulación del documento', max_length=250, null=True, verbose_name='Motivo anulación')),
                ('track_id_SII', models.IntegerField(help_text='ID de tracking asignado por el SII', verbose_name='Track ID SII')),
                ('documento_referencia_id', models.OneToOneField(blank=True, help_text='Documento de referencia (para NC/ND)', null=True, on_delete=django.db.models.deletion.PROTECT, to='transacciones.documentotributarioelectronico', verbose_name='Documento de referencia')),
            ],
            options={
                'verbose_name': 'Documento tributario electrónico',
                'verbose_name_plural': 'Documentos tributarios electrónicos',
                'ordering': ['-fecha_emision'],
            },
        ),
        migrations.CreateModel(
            name='ItemVenta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cantidad', models.IntegerField(help_text='Cantidad del producto vendido', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Cantidad')),
                ('precio_unitario', models.DecimalField(decimal_places=2, help_text='Precio unitario del producto', max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Precio unitario')),
                ('descuento', models.DecimalField(decimal_places=2, default=0.0, help_text='Descuento aplicado al ítem', max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Descuento')),
                ('tipo_impuesto', models.CharField(choices=[('Afecto', 'Afecto'), ('Exento', 'Exento')], help_text='Indica se el producto está afecto o exento de impuestos', max_length=80, verbose_name='Tipo de impuesto')),
                ('valor_impuesto', models.DecimalField(decimal_places=2, default=0.0, help_text='Valor del impuesto aplicado al ítem', max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Valor del impuesto')),
                ('total_item', models.DecimalField(decimal_places=2, help_text='Total del ítem (cantidad * precio - descuento + impuesto)', max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Total ítem')),
                ('producto_id', models.ForeignKey(help_text='Producto vendido en este ítem', on_delete=django.db.models.deletion.PROTECT, to='comercio.producto', verbose_name='Producto')),
                ('venta_id', models.ForeignKey(blank=True, help_text='Venta a la que pertenece este ítem', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='items', to='comercio.producto', verbose_name='Venta')),
            ],
            options={
                'verbose_name': 'Ítem de venta',
                'verbose_name_plural': 'Ítems de venta',
                'ordering': ['venta_id', 'id'],
            },
        ),
        migrations.CreateModel(
            name='ItemDocumento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descripcion', models.CharField(help_text='Descripción del ítem en el documento', max_length=250, verbose_name='Descripción')),
                ('cantidad', models.IntegerField(help_text='Cantidad del producto', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Cantidad')),
                ('precio_unitario', models.DecimalField(decimal_places=2, help_text='Precio unitario del producto', max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Precio unitario')),
                ('descuento', models.DecimalField(decimal_places=2, default=0.0, help_text='Descuento aplicado al ítem', max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Descuento')),
                ('tipo_impuesto', models.CharField(choices=[('Afecto', 'Afecto'), ('Exento', 'Exento')], help_text='Indica si el ítem está afecto o exento de impuestos', max_length=80, verbose_name='Tipo de impuesto')),
                ('valor_impuesto', models.DecimalField(decimal_places=2, help_text='Valor del impuesto aplicado al ítem', max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Valor del impuesto')),
                ('documento_id', models.ForeignKey(help_text='Documento tributario al que pertenece este ítem', on_delete=django.db.models.deletion.PROTECT, related_name='items', to='transacciones.documentotributarioelectronico', verbose_name='Documento')),
                ('item_venta_id', models.ForeignKey(blank=True, help_text='Ítem de venta asociado a este ítem del documento', null=True, on_delete=django.db.models.deletion.PROTECT, to='transacciones.itemventa', verbose_name='Ítem de venta')),
            ],
            options={
                'verbose_name': 'Ítem de documento',
                'verbose_name_plural': 'Ítems de documento',
                'ordering': ['documento_id', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Venta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_venta', models.DateTimeField(auto_now_add=True, help_text='Fecha y hora en que se realizó la venta', verbose_name='Fecha de venta')),
                ('total_neto', models.DecimalField(decimal_places=2, help_text='Monto neto de la venta antes de impuestos', max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Total neto')),
                ('total_iva', models.DecimalField(decimal_places=2, help_text='Monto del IVA aplicado a la venta', max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Total IVA')),
                ('total_venta', models.DecimalField(decimal_places=2, help_text='Monto total de la venta incluyendo impuestos', max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Total venta')),
                ('total_descuento', models.DecimalField(decimal_places=2, default=0.0, help_text='Monto total de descuentos aplicados', max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Total descuento')),
                ('estado', models.BooleanField(default=True, help_text='True=Venta activa, False=Venta anulada', verbose_name='Estado')),
                ('caja_id', models.ForeignKey(help_text='Caja en la que se realizó la venta', on_delete=django.db.models.deletion.PROTECT, to='transacciones.caja', verbose_name='Caja')),
                ('cliente_id', models.ForeignKey(blank=True, help_text='Cliente asociado a la venta (opcional)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='clientes.cliente', verbose_name='Cliente')),
                ('empresa_id', models.ForeignKey(blank=True, help_text='Empresa a la que pertenece la venta(opcional)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='clientes.empresa', verbose_name='Empresa')),
                ('usuario_id', models.ForeignKey(help_text='Usuario que realizó la venta', on_delete=django.db.models.deletion.PROTECT, to='usuarios.usuario', verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Venta',
                'verbose_name_plural': 'Ventas',
                'ordering': ['-fecha_venta'],
            },
        ),
        migrations.AddField(
            model_name='documentotributarioelectronico',
            name='venta_id',
            field=models.OneToOneField(help_text='Venta asociada a este documento', on_delete=django.db.models.deletion.PROTECT, to='transacciones.venta', verbose_name='Venta'),
        ),
        migrations.AddIndex(
            model_name='caja',
            index=models.Index(fields=['sucursal_id', 'numero_caja'], name='transaccion_sucursa_ceaf60_idx'),
        ),
        migrations.AddIndex(
            model_name='caja',
            index=models.Index(fields=['estado', 'esta_asignada'], name='transaccion_estado_f088a7_idx'),
        ),
        migrations.AddIndex(
            model_name='itemventa',
            index=models.Index(fields=['venta_id'], name='transaccion_venta_i_3ba9e5_idx'),
        ),
        migrations.AddIndex(
            model_name='itemventa',
            index=models.Index(fields=['producto_id'], name='transaccion_product_a8722a_idx'),
        ),
        migrations.AddIndex(
            model_name='itemdocumento',
            index=models.Index(fields=['documento_id'], name='transaccion_documen_5e3029_idx'),
        ),
        migrations.AddIndex(
            model_name='venta',
            index=models.Index(fields=['fecha_venta'], name='transaccion_fecha_v_e22ccd_idx'),
        ),
        migrations.AddIndex(
            model_name='venta',
            index=models.Index(fields=['caja_id', 'fecha_venta'], name='transaccion_caja_id_a802b3_idx'),
        ),
        migrations.AddIndex(
            model_name='venta',
            index=models.Index(fields=['cliente_id', 'fecha_venta'], name='transaccion_cliente_09b058_idx'),
        ),
        migrations.AddIndex(
            model_name='documentotributarioelectronico',
            index=models.Index(fields=['folio', 'tipo_documento'], name='transaccion_folio_6abdbd_idx'),
        ),
        migrations.AddIndex(
            model_name='documentotributarioelectronico',
            index=models.Index(fields=['fecha_emision'], name='transaccion_fecha_e_643d58_idx'),
        ),
        migrations.AddIndex(
            model_name='documentotributarioelectronico',
            index=models.Index(fields=['track_id_SII'], name='transaccion_track_i_f5a939_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='documentotributarioelectronico',
            unique_together={('folio', 'tipo_documento')},
        ),
    ]
